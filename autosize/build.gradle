apply plugin: 'com.android.library'

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode rootProject.versionCode
        versionName rootProject.versionName
        consumerProguardFiles 'proguard-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
        warning 'InvalidPackage'
    }
}

dependencies {
    compileOnly rootProject.appcompat_v7
}

//apply from: 'bintray.gradle'

apply plugin: 'com.github.dcendents.android-maven'
group='com.github.Vijay-Ji' // com.github.<YourUsername>

static def generateVersionCode() {
    def strTime = new Date().format("yyyyMMdd", TimeZone.getTimeZone("GMT+8"))
    return Integer.parseInt(strTime)
}

task deleteMediateJar(type: Delete) {
    delete file('build/intermediates/others/classes')
    doLast {
        // 删除临时文件
        println('Delete temp files of Others')
    }
}

task copyJar2Mediate(type: Copy, dependsOn: [deleteMediateJar]) {
    from zipTree('build/intermediates/runtime_library_classes/release/classes.jar')
    into new File('build/intermediates/others/classes')
    doLast {
        println('Unzip and copy **.jar to \'build/intermediates/others/classes\'')
    }
}

// 自动生成autosize的jar
// 命令：gradlew :autosize:makeJar
task makeJar(type: Jar, dependsOn: ['assembleRelease', copyJar2Mediate]) {
    // 导出的jar文件名称
    archiveName = 'autosize_' + generateVersionCode() + '.jar'
    // 从哪个目录打包jar
    from('build/intermediates/others/classes')
    // 导出的jar文件的存放目录（未指定则默认存放在build/libs下）
    destinationDir = file('build/libs')
    // 去掉不要的类，
    // exclude('com/android') // jar不含有类路径com.android
    // exclude('com/android/*') // jar含有类路径com.android
    // exclude('android')
    // 需要打包的类
    // include('com/**/*.class')
    doLast {
        println('MakeJar ' + archiveName + ' to \'build/libs\'')
    }
}